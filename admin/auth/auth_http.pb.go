// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// source: admin/auth/auth.proto

package auth

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = gin.Version

const OperationAuthforceLogout = "/Atreus.auth.Auth/forceLogout"
const OperationAuthgetUserToken = "/Atreus.auth.Auth/getUserToken"
const OperationAuthparseToken = "/Atreus.auth.Auth/parseToken"
const OperationAuthuserToken = "/Atreus.auth.Auth/userToken"

type AuthHTTPServer interface {
	// ForceLogout强制退出登录
	ForceLogout(context.Context, *ForceLogoutReq) (*ForceLogoutResp, error)
	// GetUserToken 管理员获取用户 token
	GetUserToken(context.Context, *GetUserTokenReq) (*GetUserTokenResp, error)
	// ParseToken解析token
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	// UserToken生成token
	UserToken(context.Context, *UserTokenReq) (*UserTokenResp, error)
}

func RegisterAuthHTTPServer(s *gin.Engine, handleFunc gin.HandlerFunc, srv AuthHTTPServer) {
	r := s.Group("/")
	r.POST("/auth/user_token", _Auth_UserToken0_HTTP_Handler(srv))
	r.POST("/auth/get_user_token", _Auth_GetUserToken0_HTTP_Handler(srv))
	r.POST("/auth/force_logout", _Auth_ForceLogout0_HTTP_Handler(srv))
	r.POST("/auth/parse_token", _Auth_ParseToken0_HTTP_Handler(srv))
}

func _Auth_UserToken0_HTTP_Handler(srv AuthHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in UserTokenReq
		if err := ctx.Bind(&in); err != nil {
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			return
		}
		out, err := srv.UserToken(ctx, &in)
		if err != nil {
			ctx.JSON(500, err)
			return
		}
		reply := out
		ctx.JSON(200, reply)
		return
	}
}

func _Auth_GetUserToken0_HTTP_Handler(srv AuthHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in GetUserTokenReq
		if err := ctx.Bind(&in); err != nil {
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			return
		}
		out, err := srv.GetUserToken(ctx, &in)
		if err != nil {
			ctx.JSON(500, err)
			return
		}
		reply := out
		ctx.JSON(200, reply)
		return
	}
}

func _Auth_ForceLogout0_HTTP_Handler(srv AuthHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in ForceLogoutReq
		if err := ctx.Bind(&in); err != nil {
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			return
		}
		out, err := srv.ForceLogout(ctx, &in)
		if err != nil {
			ctx.JSON(500, err)
			return
		}
		reply := out
		ctx.JSON(200, reply)
		return
	}
}

func _Auth_ParseToken0_HTTP_Handler(srv AuthHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in ParseTokenReq
		if err := ctx.Bind(&in); err != nil {
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			return
		}
		out, err := srv.ParseToken(ctx, &in)
		if err != nil {
			ctx.JSON(500, err)
			return
		}
		reply := out
		ctx.JSON(200, reply)
		return
	}
}
